IR = [32363.0,32427.0,32496.0,32559.0,32619.0,32655.0,32700.0,32746.0,32744.0,32569.0,     32294.0,33308.0,35477.0,36383.0,36537.0,36505.0,36131.0,35070.0,33927.0,     33274.0,33553.0,33761.0]t = [11.4388,11.4505,11.4586,11.4718,11.4796,11.4917,11.5047,11.5128,11.5247,     11.5327,11.5448,11.5538,11.5658,11.5775,11.5856,11.5987,11.6066,11.6186,     11.6266,11.6398,11.6517,11.6596]d = [t, IR]IR2 = [37743,37818,37893,37955,37996,38053,38070,37970,37658,37048,36083,35023,       34469,34385,34453,34552,34749,35082,35310,35588,35850,36007,36189,36371,       36540,36656,36727,36781,36838,36890,36929,36966,36998,37023,37055,37094,       37120]t2 = [13.2935,13.3027,13.3146,13.3263,13.3345,13.3477,13.3556,13.3678,13.3757,      13.3886,13.4006,13.4085,13.4205,13.4296,13.4417,13.4497,13.4616,13.4746,      13.4826,13.4947,13.5027,13.5158,13.5236,13.5356,13.5476,13.5566,13.5690,      13.5766,13.5887,13.5976,13.6097,13.6215,13.6295,13.6426,13.6505,13.6627,      13.6706]d2=[t2,IR2]#Works with 2_15_Blink_Down, 2_16_Blink_RandomMovements3, 2_16_Blink_RandomMovements4#Catches 2/3 blinks for 2_16_Blink_RandomMovements5import csv    def testAlg(data):    #Any derivatives above/below these values are considered part of a blink    negSlopeThresh = -23000    posSlopeThresh = 13000    #Length of running average    n=4    n2 = 2    trackPos = False    trackNeg = False    derivVector = []    startIR = 0    startT = 0    endT = 0    endIR = 0    peak = 0    valley = 0    blinkRange = []    flat = 0    negB = False    posB = False    positive = 0    negative = 0    #Running average of derivatives    runningAvg = 0        time = data[0]    IRVal = data[1]    #print "Entering for loop"        #Begin looping through all the IR data    #We start at 1 instead of 0 to ease taking the derivative    for i in range(1, len(IRVal)):        #Take the derivative        deriv = (IRVal[i]-IRVal[i-1])/(time[i]-time[i-1])        derivVector.append(deriv)                if(trackPos):            #print "Tracking positive slope"            if(len(derivVector)<n):                runningAvg = sum(derivVector)/len(derivVector)            else:                runningAvg = sum(derivVector[i-(n-1):i+1])/n                        #This means it was a false alarm, I may need two positive thresholds            #I'm saying this isn't a blink if the running average falls below a threshold            #and the slope hasn't been within the threshold for n or more values            if(runningAvg < posSlopeThresh and len(derivVector) < n):                #print "False Positive Alarm w/ Deriv: " + str(deriv)                #print "Time = " + str(time[i])                trackPos = False                runningAvg = 0                startT = 0                startIR = 0                peak = 0            #Otherwise we might be part of the slope still            else:                #If the IRVal is greater than the previous peak, this is now                #considered the peak                if(IRVal[i-1] > peak):                    peak = IRVal[i-1]                #If at any point the running average is "flat", meaning the slope is                #less than the positive threshold and greater than the negative one,                #that likely means we're at the end of the blink                if(deriv < 0):                    if(deriv > negSlopeThresh):                        negative = negative + 1                        if(negative > n):                            endT = time[i-2]                            endIR = IRVal[i-2]                            if(endIR == peak):                                print "Bad"                            elif((peak-endIR) > 1000 and (peak-startIR) > 1000):                                #print "Ending time is: " + str(endT)                                #print "Ending deriv is " + str(deriv)                                blinkRange.append([startT, endT, peak])                            else:                                print "Bad here?"                                                             endT = 0                            endIR = 0                            trackPos = False                            runningAvg = 0                            startT = 0                            startIR = 0                            peak = 0                            #Clearing out the vector a little                            derivVector = derivVector[i-(n-1):i+1]                            positive = 0                            negative = 0                            negB = False                        else:                            negB = True                    else:                        negB = True                                        elif(negB):                    if(positive == 0):                        positive = 1                    elif(positive == 1):                        positive = 2                    else:                        endT = time[i-2]                        endIR = IRVal[i-2]                        if(endIR == peak):                            print "Bad"                        elif((peak-endIR) > 1000 and (peak-startIR) > 1000):                            #print "Ending time is: " + str(endT)                            blinkRange.append([startT, endT, peak])                        else:                            print "Bad"                        endT = 0                        endIR = 0                        trackPos = False                        runningAvg = 0                        startT = 0                        peak = 0                        #Clearing out the vector a little                        derivVector = derivVector[i-(n-1):i+1]                        negB = False                        positive = 0                        elif(trackNeg):            #print "Tracking negative slope w/ deriv: " + str(deriv)            if(len(derivVector)<n):                runningAvg = sum(derivVector)/len(derivVector)            else:                runningAvg = sum(derivVector[i-(n-1):i+1])/n            #print "Running Average: " + str(runningAvg)                        #This means it was a false alarm, I may need two positive thresholds            #I'm saying this isn't a blink if the running average falls below a threshold            #and the slope hasn't been within the threshold for n or more values            if(runningAvg > negSlopeThresh and len(derivVector) < n):                #print "False Negative Alarm w/ Deriv: " + str(deriv)                #print "Time = " + str(time[i])                trackNeg = False                runningAvg = 0                startT = 0                startIR = 0                valley = 0            #Otherwise we might be part of the slope still            else:                #If the IRVal is greater than the previous peak, this is now                #considered the peak                if(IRVal[i-1] < valley):                    valley = IRVal[i-1]                #We're coming up from the valley                if(deriv > 0):                    #If the derivative is less than the positive threshold, that means                    #we've likely flattened out                    if(deriv < posSlopeThresh):                        positive = positive + 1                        #If there's been a positive slope for n times, the blink is over                        if(positive > n):                            endT = time[i-2]                            endIR = IRVal[i-2]                            if(endIR == valley):                                print "Bad"                            elif((endIR - valley) > 1000 and (startIR - valley) > 1000):                                #print "Ending time is: " + str(endT)                                blinkRange.append([startT, endT, valley])                            else:                                print "Bad at: " + str(time[i-2])                                print endIR - valley                                print startIR - valley                            trackNeg = False                            runningAvg = 0                            startT = 0                            endT = 0                            endIR = 0                            valley = 0                            positive = 0                            #Clearing out the vector a little                            derivVector = derivVector[i-(n-1):i+1]                            posB = False                            negative = 0                        #Otherwise note that we have a positive slope right now                        else:                            posB = True                    else:                        posB = True                #If the slope is negtaive after we've been coming out of the valley, that                #means the blink is over                elif(posB):                    #Just in case I'll wait one round to be sure                    if(negative == 0):                        negative = 1                    elif(negative == 1):                        negative = 2                    else:                        endT = time[i-2]                        endIR = IRVal[i-2]                        if(endIR == valley):                            print "Bad"                        elif((endIR - valley) > 1000 and (startIR - valley) > 1000):                            #print "Ending time is: " + str(endT)                            blinkRange.append([startT, endT, valley])                        else:                            print "Bad"                        trackNeg = False                        runningAvg = 0                        startT = 0                        valley = 0                        endT = 0                        endIR = 0                        #Clearing out the vector a little                        derivVector = derivVector[i-(n-1):i+1]                        posB = False                        negative = 0        #This runs the first time through since we haven't checked the        #slopes yet        else:            #May be dealing with a peak            if(deriv >= posSlopeThresh):                #start tracking the slope!                print "Looking for peak at time: " + str(time[i-1]) + "after deriv: " + str(deriv)                trackPos = True                startT = time[i-1]                startIR = IRVal[i-1]                peak = IRVal[i-1]            #May be dealing with a valley            elif(deriv <= negSlopeThresh):                print "Looking for valley at time: " + str(time[i-1]) + "after deriv: " + str(deriv)                trackNeg = True                startT = time[i-1]                startIR = IRVal[i-1]                valley = IRVal[i-1]            else:                startT = 0                startIR = 0                peak = 0                valley = 0    return blinkRange                         if __name__ == "__main__":    timeVector = []    IRVector = []    i = 1    with open('2_16_Blink_RandomMovements5.csv', 'rU') as csvfile:        reader = csv.reader(csvfile, dialect=csv.excel_tab)        for line in reader:            if(i==1):                i = 2            else:                lineVector = line[0].split(',')                second = float(lineVector[2])                microSecond = float(lineVector[3])                combinedTime = second + 0.000001*microSecond                timeVector.append(combinedTime)                IRVector.append(float(lineVector[4]))    j=testAlg([timeVector,IRVector])    print j